Objective Function
Constraints
Optimization Mode Settings
Design Variables these are section for Stopping Condition are already there, if the user choose optimization these extra 4 sections will appear in additional to the fields if the user choose Simulation , optimization is the same with simulation with these additional sections. simulation is working fine, the json is loading and launch button is working fine. now if we implement the functionality of populating these 4 sections it will work too. these sections are little bit tricky because there are many dynamically changing fields  @TODO.md , these is the stryucture of json thst user uploads , keep in mind the values for objective function and constraints are in this single , you can identify the objective functtion with type: OBJECTIVE field. the rest are constraints.these are the data for mode , these are design variables . in this sections. the fields are dynamically added for eg. in default in objective fuction there will already 2 forms generated, the user can add atmost 2 forms. so look for this field in if there is only one, delete the other one. same for constraints in this example you can see there 4 pairs so you can conclude, there are 4 constraint forms, when page loads there will be 2, add or remove as required. in this constraint tolerance the each values seperated are of each constraint tolerance. they are not with each key value pairs. they are seperate in json. you can see the html structure in @mission.html and most of the fields are dynamic the js and inner html can be found in @optimization.js . this json structure is manual input created using this js file. so the variable names are reversible. we already acheieved dynamic field generation of stages and motor, the same logic applies here, maybe you can refer it. before implementing lets discuss further befire that, add this plan and workflow in a new md  file inside @Instructions 